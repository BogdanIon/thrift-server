/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.aurachain.thirft.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-12-16")
public class CrossPlatformResource implements org.apache.thrift.TBase<CrossPlatformResource, CrossPlatformResource._Fields>, java.io.Serializable, Cloneable, Comparable<CrossPlatformResource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossPlatformResource");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SALUTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("salutation", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("emails", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ID_AND_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("idAndUserName", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField IS_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isAdmin", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField USER_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userSet", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CrossPlatformResourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CrossPlatformResourceTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String salutation; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> emails; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> idAndUserName; // optional
  public boolean isAdmin; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> userSet; // optional
  /**
   * 
   * @see UserType
   */
  public @org.apache.thrift.annotation.Nullable UserType userType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SALUTATION((short)3, "salutation"),
    EMAILS((short)4, "emails"),
    ID_AND_USER_NAME((short)5, "idAndUserName"),
    IS_ADMIN((short)6, "isAdmin"),
    USER_SET((short)7, "userSet"),
    /**
     * 
     * @see UserType
     */
    USER_TYPE((short)8, "userType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SALUTATION
          return SALUTATION;
        case 4: // EMAILS
          return EMAILS;
        case 5: // ID_AND_USER_NAME
          return ID_AND_USER_NAME;
        case 6: // IS_ADMIN
          return IS_ADMIN;
        case 7: // USER_SET
          return USER_SET;
        case 8: // USER_TYPE
          return USER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISADMIN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SALUTATION,_Fields.ID_AND_USER_NAME,_Fields.USER_SET,_Fields.USER_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALUTATION, new org.apache.thrift.meta_data.FieldMetaData("salutation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAILS, new org.apache.thrift.meta_data.FieldMetaData("emails", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ID_AND_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("idAndUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("isAdmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER_SET, new org.apache.thrift.meta_data.FieldMetaData("userSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossPlatformResource.class, metaDataMap);
  }

  public CrossPlatformResource() {
  }

  public CrossPlatformResource(
    int id,
    java.lang.String name,
    java.util.List<java.lang.String> emails,
    boolean isAdmin)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.emails = emails;
    this.isAdmin = isAdmin;
    setIsAdminIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossPlatformResource(CrossPlatformResource other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSalutation()) {
      this.salutation = other.salutation;
    }
    if (other.isSetEmails()) {
      java.util.List<java.lang.String> __this__emails = new java.util.ArrayList<java.lang.String>(other.emails);
      this.emails = __this__emails;
    }
    if (other.isSetIdAndUserName()) {
      java.util.Map<java.lang.String,java.lang.String> __this__idAndUserName = new java.util.HashMap<java.lang.String,java.lang.String>(other.idAndUserName);
      this.idAndUserName = __this__idAndUserName;
    }
    this.isAdmin = other.isAdmin;
    if (other.isSetUserSet()) {
      java.util.Set<java.lang.String> __this__userSet = new java.util.HashSet<java.lang.String>(other.userSet);
      this.userSet = __this__userSet;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
  }

  public CrossPlatformResource deepCopy() {
    return new CrossPlatformResource(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.salutation = null;
    this.emails = null;
    this.idAndUserName = null;
    setIsAdminIsSet(false);
    this.isAdmin = false;
    this.userSet = null;
    this.userType = null;
  }

  public int getId() {
    return this.id;
  }

  public CrossPlatformResource setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public CrossPlatformResource setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSalutation() {
    return this.salutation;
  }

  public CrossPlatformResource setSalutation(@org.apache.thrift.annotation.Nullable java.lang.String salutation) {
    this.salutation = salutation;
    return this;
  }

  public void unsetSalutation() {
    this.salutation = null;
  }

  /** Returns true if field salutation is set (has been assigned a value) and false otherwise */
  public boolean isSetSalutation() {
    return this.salutation != null;
  }

  public void setSalutationIsSet(boolean value) {
    if (!value) {
      this.salutation = null;
    }
  }

  public int getEmailsSize() {
    return (this.emails == null) ? 0 : this.emails.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getEmailsIterator() {
    return (this.emails == null) ? null : this.emails.iterator();
  }

  public void addToEmails(java.lang.String elem) {
    if (this.emails == null) {
      this.emails = new java.util.ArrayList<java.lang.String>();
    }
    this.emails.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getEmails() {
    return this.emails;
  }

  public CrossPlatformResource setEmails(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> emails) {
    this.emails = emails;
    return this;
  }

  public void unsetEmails() {
    this.emails = null;
  }

  /** Returns true if field emails is set (has been assigned a value) and false otherwise */
  public boolean isSetEmails() {
    return this.emails != null;
  }

  public void setEmailsIsSet(boolean value) {
    if (!value) {
      this.emails = null;
    }
  }

  public int getIdAndUserNameSize() {
    return (this.idAndUserName == null) ? 0 : this.idAndUserName.size();
  }

  public void putToIdAndUserName(java.lang.String key, java.lang.String val) {
    if (this.idAndUserName == null) {
      this.idAndUserName = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.idAndUserName.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getIdAndUserName() {
    return this.idAndUserName;
  }

  public CrossPlatformResource setIdAndUserName(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> idAndUserName) {
    this.idAndUserName = idAndUserName;
    return this;
  }

  public void unsetIdAndUserName() {
    this.idAndUserName = null;
  }

  /** Returns true if field idAndUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetIdAndUserName() {
    return this.idAndUserName != null;
  }

  public void setIdAndUserNameIsSet(boolean value) {
    if (!value) {
      this.idAndUserName = null;
    }
  }

  public boolean isIsAdmin() {
    return this.isAdmin;
  }

  public CrossPlatformResource setIsAdmin(boolean isAdmin) {
    this.isAdmin = isAdmin;
    setIsAdminIsSet(true);
    return this;
  }

  public void unsetIsAdmin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISADMIN_ISSET_ID);
  }

  /** Returns true if field isAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAdmin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISADMIN_ISSET_ID);
  }

  public void setIsAdminIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISADMIN_ISSET_ID, value);
  }

  public int getUserSetSize() {
    return (this.userSet == null) ? 0 : this.userSet.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUserSetIterator() {
    return (this.userSet == null) ? null : this.userSet.iterator();
  }

  public void addToUserSet(java.lang.String elem) {
    if (this.userSet == null) {
      this.userSet = new java.util.HashSet<java.lang.String>();
    }
    this.userSet.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getUserSet() {
    return this.userSet;
  }

  public CrossPlatformResource setUserSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> userSet) {
    this.userSet = userSet;
    return this;
  }

  public void unsetUserSet() {
    this.userSet = null;
  }

  /** Returns true if field userSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSet() {
    return this.userSet != null;
  }

  public void setUserSetIsSet(boolean value) {
    if (!value) {
      this.userSet = null;
    }
  }

  /**
   * 
   * @see UserType
   */
  @org.apache.thrift.annotation.Nullable
  public UserType getUserType() {
    return this.userType;
  }

  /**
   * 
   * @see UserType
   */
  public CrossPlatformResource setUserType(@org.apache.thrift.annotation.Nullable UserType userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SALUTATION:
      if (value == null) {
        unsetSalutation();
      } else {
        setSalutation((java.lang.String)value);
      }
      break;

    case EMAILS:
      if (value == null) {
        unsetEmails();
      } else {
        setEmails((java.util.List<java.lang.String>)value);
      }
      break;

    case ID_AND_USER_NAME:
      if (value == null) {
        unsetIdAndUserName();
      } else {
        setIdAndUserName((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case IS_ADMIN:
      if (value == null) {
        unsetIsAdmin();
      } else {
        setIsAdmin((java.lang.Boolean)value);
      }
      break;

    case USER_SET:
      if (value == null) {
        unsetUserSet();
      } else {
        setUserSet((java.util.Set<java.lang.String>)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((UserType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case SALUTATION:
      return getSalutation();

    case EMAILS:
      return getEmails();

    case ID_AND_USER_NAME:
      return getIdAndUserName();

    case IS_ADMIN:
      return isIsAdmin();

    case USER_SET:
      return getUserSet();

    case USER_TYPE:
      return getUserType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SALUTATION:
      return isSetSalutation();
    case EMAILS:
      return isSetEmails();
    case ID_AND_USER_NAME:
      return isSetIdAndUserName();
    case IS_ADMIN:
      return isSetIsAdmin();
    case USER_SET:
      return isSetUserSet();
    case USER_TYPE:
      return isSetUserType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossPlatformResource)
      return this.equals((CrossPlatformResource)that);
    return false;
  }

  public boolean equals(CrossPlatformResource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_salutation = true && this.isSetSalutation();
    boolean that_present_salutation = true && that.isSetSalutation();
    if (this_present_salutation || that_present_salutation) {
      if (!(this_present_salutation && that_present_salutation))
        return false;
      if (!this.salutation.equals(that.salutation))
        return false;
    }

    boolean this_present_emails = true && this.isSetEmails();
    boolean that_present_emails = true && that.isSetEmails();
    if (this_present_emails || that_present_emails) {
      if (!(this_present_emails && that_present_emails))
        return false;
      if (!this.emails.equals(that.emails))
        return false;
    }

    boolean this_present_idAndUserName = true && this.isSetIdAndUserName();
    boolean that_present_idAndUserName = true && that.isSetIdAndUserName();
    if (this_present_idAndUserName || that_present_idAndUserName) {
      if (!(this_present_idAndUserName && that_present_idAndUserName))
        return false;
      if (!this.idAndUserName.equals(that.idAndUserName))
        return false;
    }

    boolean this_present_isAdmin = true;
    boolean that_present_isAdmin = true;
    if (this_present_isAdmin || that_present_isAdmin) {
      if (!(this_present_isAdmin && that_present_isAdmin))
        return false;
      if (this.isAdmin != that.isAdmin)
        return false;
    }

    boolean this_present_userSet = true && this.isSetUserSet();
    boolean that_present_userSet = true && that.isSetUserSet();
    if (this_present_userSet || that_present_userSet) {
      if (!(this_present_userSet && that_present_userSet))
        return false;
      if (!this.userSet.equals(that.userSet))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalutation()) ? 131071 : 524287);
    if (isSetSalutation())
      hashCode = hashCode * 8191 + salutation.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmails()) ? 131071 : 524287);
    if (isSetEmails())
      hashCode = hashCode * 8191 + emails.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdAndUserName()) ? 131071 : 524287);
    if (isSetIdAndUserName())
      hashCode = hashCode * 8191 + idAndUserName.hashCode();

    hashCode = hashCode * 8191 + ((isAdmin) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUserSet()) ? 131071 : 524287);
    if (isSetUserSet())
      hashCode = hashCode * 8191 + userSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserType()) ? 131071 : 524287);
    if (isSetUserType())
      hashCode = hashCode * 8191 + userType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(CrossPlatformResource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalutation()).compareTo(other.isSetSalutation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalutation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salutation, other.salutation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmails()).compareTo(other.isSetEmails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emails, other.emails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdAndUserName()).compareTo(other.isSetIdAndUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdAndUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idAndUserName, other.idAndUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAdmin()).compareTo(other.isSetIsAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAdmin, other.isAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserSet()).compareTo(other.isSetUserSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSet, other.userSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CrossPlatformResource(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetSalutation()) {
      if (!first) sb.append(", ");
      sb.append("salutation:");
      if (this.salutation == null) {
        sb.append("null");
      } else {
        sb.append(this.salutation);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("emails:");
    if (this.emails == null) {
      sb.append("null");
    } else {
      sb.append(this.emails);
    }
    first = false;
    if (isSetIdAndUserName()) {
      if (!first) sb.append(", ");
      sb.append("idAndUserName:");
      if (this.idAndUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.idAndUserName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isAdmin:");
    sb.append(this.isAdmin);
    first = false;
    if (isSetUserSet()) {
      if (!first) sb.append(", ");
      sb.append("userSet:");
      if (this.userSet == null) {
        sb.append("null");
      } else {
        sb.append(this.userSet);
      }
      first = false;
    }
    if (isSetUserType()) {
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (emails == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emails' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossPlatformResourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CrossPlatformResourceStandardScheme getScheme() {
      return new CrossPlatformResourceStandardScheme();
    }
  }

  private static class CrossPlatformResourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<CrossPlatformResource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossPlatformResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SALUTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salutation = iprot.readString();
              struct.setSalutationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.emails = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.emails.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEmailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID_AND_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.idAndUserName = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key4;
                @org.apache.thrift.annotation.Nullable java.lang.String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.idAndUserName.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setIdAndUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAdmin = iprot.readBool();
              struct.setIsAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.userSet = new java.util.HashSet<java.lang.String>(2*_set7.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.userSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setUserSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userType = UserType.findByValue(iprot.readI32());
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossPlatformResource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.salutation != null) {
        if (struct.isSetSalutation()) {
          oprot.writeFieldBegin(SALUTATION_FIELD_DESC);
          oprot.writeString(struct.salutation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.emails != null) {
        oprot.writeFieldBegin(EMAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emails.size()));
          for (java.lang.String _iter10 : struct.emails)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.idAndUserName != null) {
        if (struct.isSetIdAndUserName()) {
          oprot.writeFieldBegin(ID_AND_USER_NAME_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.idAndUserName.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter11 : struct.idAndUserName.entrySet())
            {
              oprot.writeString(_iter11.getKey());
              oprot.writeString(_iter11.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_ADMIN_FIELD_DESC);
      oprot.writeBool(struct.isAdmin);
      oprot.writeFieldEnd();
      if (struct.userSet != null) {
        if (struct.isSetUserSet()) {
          oprot.writeFieldBegin(USER_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.userSet.size()));
            for (java.lang.String _iter12 : struct.userSet)
            {
              oprot.writeString(_iter12);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.userType != null) {
        if (struct.isSetUserType()) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.userType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossPlatformResourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CrossPlatformResourceTupleScheme getScheme() {
      return new CrossPlatformResourceTupleScheme();
    }
  }

  private static class CrossPlatformResourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<CrossPlatformResource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossPlatformResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.emails.size());
        for (java.lang.String _iter13 : struct.emails)
        {
          oprot.writeString(_iter13);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSalutation()) {
        optionals.set(2);
      }
      if (struct.isSetIdAndUserName()) {
        optionals.set(3);
      }
      if (struct.isSetIsAdmin()) {
        optionals.set(4);
      }
      if (struct.isSetUserSet()) {
        optionals.set(5);
      }
      if (struct.isSetUserType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSalutation()) {
        oprot.writeString(struct.salutation);
      }
      if (struct.isSetIdAndUserName()) {
        {
          oprot.writeI32(struct.idAndUserName.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.idAndUserName.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetIsAdmin()) {
        oprot.writeBool(struct.isAdmin);
      }
      if (struct.isSetUserSet()) {
        {
          oprot.writeI32(struct.userSet.size());
          for (java.lang.String _iter15 : struct.userSet)
          {
            oprot.writeString(_iter15);
          }
        }
      }
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.userType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossPlatformResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.emails = new java.util.ArrayList<java.lang.String>(_list16.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
        for (int _i18 = 0; _i18 < _list16.size; ++_i18)
        {
          _elem17 = iprot.readString();
          struct.emails.add(_elem17);
        }
      }
      struct.setEmailsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.salutation = iprot.readString();
        struct.setSalutationIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.idAndUserName = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map19.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key20;
          @org.apache.thrift.annotation.Nullable java.lang.String _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            _val21 = iprot.readString();
            struct.idAndUserName.put(_key20, _val21);
          }
        }
        struct.setIdAndUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isAdmin = iprot.readBool();
        struct.setIsAdminIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.userSet = new java.util.HashSet<java.lang.String>(2*_set23.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem24;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.userSet.add(_elem24);
          }
        }
        struct.setUserSetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userType = UserType.findByValue(iprot.readI32());
        struct.setUserTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

